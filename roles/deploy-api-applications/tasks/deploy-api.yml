---
- name: Creating a temporary folder for applications
  file: path={{api_application_tmp}} state=directory

- name: Copying WKCD API Application from the WKCD Maven Repository
  maven_artifact: group_id=wkcd-aem artifact_id=wkcd-aem-api version={{build_version}} repository_url={{api_repository_url}} dest={{api_application_tmp}} extension=jar

- name: Rename API jar
  become: yes
  become_method: sudo
  shell: mv {{api_application_tmp}}/wkcd-aem-api-{{build_version}}.jar {{api_application_tmp}}/wkcd-aem-api.jar

- name: Copy WKCD API jar to API Container
  become: yes
  become_method: sudo
  shell: docker cp {{api_application_tmp}}/wkcd-aem-api.jar {{ docker_container_name }}:/api

- name: copy config file
  synchronize:
    src: "config"
    dest: "{{api_application_tmp}}"

- name: Rewrite config file
  become: yes
  become_method: sudo
  shell: echo '{ "localhostURL":"http://{{ ansible_host }}:4503" }' >> {{api_application_tmp}}/config/localhostURL.json

# - name: copy develop file
#   synchronize:
#     src: "develop"
#     dest: "{{api_application_tmp}}"

# - name: copy sit file
#   synchronize:
#     src: "sit"
#     dest: "{{api_application_tmp}}"

# - name: copy staging file
#   synchronize:
#     src: "staging"
#     dest: "{{api_application_tmp}}"

# - name: copy uat file
#   synchronize:
#     src: "uat"
#     dest: "{{api_application_tmp}}"

# - name: copy logs file
#   synchronize:
#     src: "logs"
#     dest: "{{api_application_tmp}}"

- name: Copy config to API Container
  become: yes
  become_method: sudo
  shell: docker cp {{api_application_tmp}}/config {{ docker_container_name }}:/api

# - name: Change config to API Container
#   become: yes
#   become_method: sudo
#   shell: docker cp {{api_application_tmp}}/{{ server_environment }}/localhostURL.json {{ docker_container_name }}:/api/config

# - name: Copy logs to API Container
#   become: yes
#   become_method: sudo
#   shell: docker cp {{api_application_tmp}}/logs {{ docker_container_name }}:/api       

- name: Removing temporary folders
  file: path={{api_application_tmp}} state=absent

- name: stop container
  docker_container:
    name: "{{ docker_container_name }}"
    state: stopped
    stop_timeout: "{{ stop_timeout }}"
    privileged: true
    docker_api_version: "{{ docker.api_version }}"
  become: yes
  tags:
    - docker-containers-api-stop

- name: restart container
  docker_container:
    name: "{{ docker_container_name }}"
    state: started
    restart: yes
    privileged: true
    docker_api_version: "{{ docker.api_version }}"
  become: yes
  tags:
    - docker-containers-api-restart

# - name: create smb mount point
#   shell: "docker exec {{ docker_container_name }} bash -c \"{{ item }}\""
#   with_items:
#    - "mkdir -p /api/config"
#    - "mkdir -p /api/log"
#   become: yes
#   tags:
#     - api-mount-samba
#     - docker-containers-muleesb-restart

# - name: update container's /etc/fstab
#   shell: "docker exec {{ docker_container_name }} bash -c \"{{ item }}\""
#   with_items:
#    - "touch /etc/fstab"
#   # - "grep -q '^.*DAM_to_TMS.*$' /etc/fstab && sed -i 's/^.*DAM_to_TMS.*$/\\/\\/{{ samba_host }}\\/m\\/DAM_Integration\\/DAM_to_TMS\\/{{ consul_environment }} \\/mnt\\/DAM_to_TMS\\/      cifs     username={{ samba_user }},password={{ samba_pass }}       0 0/' /etc/fstab || echo '//{{ samba_host }}/m/DAM_Integration/DAM_to_TMS/{{ consul_environment }} /mnt/DAM_to_TMS/      cifs     username={{ samba_user }},password={{ samba_pass }}       0 0' >> /etc/fstab"
#   # - "app-a-fs001.wkcda.local:/{{ nfs_share }}/{{ inventory_hostname_short }} {{ docker_volume_basepath }}      nfs     defaults       0 0"
#    - "echo 'app-a-fs001.wkcda.local:/{{ nfs_share }}/{{ inventory_hostname_short }} /api/config      cifs     username={{ samba_user }},password={{ samba_pass }},sec=ntlm,dom=wkcda 0 0' >> /etc/fstab"
#   become: yes
#   no_log: true
#   tags:
#     - api-mount-samba
#     - docker-containers-muleesb-restart

# - name: create smb mount point
#   shell: "docker exec {{ docker_container_name }} bash -c \"{{ item }}\""
#   with_items:
#    - "mount -a"
#   become: yes
#   ignore_errors: true
#   tags:
#     - esb-mount-samba
#     - docker-containers-muleesb-restart